# Licensed Materials - Property of IBM
# IBM Order Management Software (5725-D10)
# (C) Copyright IBM Corp. 2018, 2021 All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
{{- if and .Values.global.license  .Values.global.licenseStoreCallCenter }}
{{ $global := . }}
{{- $sysOverridesInitPath := "/opt/ssfs/system_overrides.properties.init" }}
{{ $sysOverridesPath := "/opt/ssfs/runtime/properties/system_overrides.properties" }}
{{ if .Values.omserver -}}
{{ range .Values.omserver.servers -}}
{{ if . -}}
{{ $inter := . }}
{{ range $inter.name -}}
{{ if . -}}
{{- include "sch.config.init" (list $global "om-chart.sch.chart.config.values") -}}
{{- $serverNameUnQuote := . -}}
{{- $serverName := . | quote -}}
{{- $serverNameLow := . | lower -}}
{{- $varServerStateDir := "/opt/ssfs/runtime/serverstate" }}
{{- $varTrustStoreJvmArg := "" }}
{{- $varTrustStorePath := "" }}
{{- $varTrustStorePass := "" }}
{{- $varTrustedDir := "" }}
{{- $varUseJDKTrustStore := "" }}
{{- $varKeyStoreJvmArg := "" }}
{{- $varKeyStorePath := "" }}
{{- $varServerStateJvmArg := (printf "%s=%s" "-Dserver.state.dir" $varServerStateDir) }}
{{- $readyProbePeriod := 15 }}
{{- $readinessFailRestartAfterMinutes := $global.Values.omserver.common.readinessFailRestartAfterMinutes | default 10 }}
{{- $varReadinessFailRestartAfterMinutes := $inter.readinessFailRestartAfterMinutes | default $readinessFailRestartAfterMinutes }}
{{- $readyFailRestartSeconds := (mul $varReadinessFailRestartAfterMinutes 60) | default 600 }}
{{- /* for agent liveness check is not appplicable hence hardcoding livenessProbeDelay */}}
{{- $liveProbeBeginDelaySecs := 60 }}
{{- $terminationGracePeriod := $global.Values.omserver.common.terminationGracePeriodSeconds | default 60 }}
{{- $liveFailThreshold := add (div (sub $readyFailRestartSeconds $liveProbeBeginDelaySecs) $readyProbePeriod) 1 }}
{{- $readyFailThreshold := div $readyFailRestartSeconds $readyProbePeriod }}
{{- $varJvmArgs := (cat $global.Values.omserver.common.jvmArgs $inter.jvmArgs) -}}
{{- $varReplicaCount := $inter.replicaCount | default $global.Values.omserver.common.replicaCount -}}
{{- $varResources := $inter.resources | default $global.Values.omserver.common.resources -}}
{{- $varNodeAffinity := $inter.nodeAffinity | default $global.Values.omserver.common.nodeAffinity -}}
{{- $varPodAffinity := $inter.podAffinity | default $global.Values.omserver.common.podAffinity -}}
{{- $varPodAntiAffinity := $inter.podAntiAffinity | default $global.Values.omserver.common.podAntiAffinity -}}
{{- $varTolerations := $inter.tolerations | default $global.Values.omserver.common.tolerations }}
{{- $varCustLabels := $inter.podLabels | default $global.Values.omserver.common.podLabels }}
{{- $custLabels := $varCustLabels | default (dict) }}
{{- $stdPodLabel := "serverName" }}
{{- $stdPodLabelVal := $serverNameLow }}

{{- if $global.Values.global.security }}
{{- if $global.Values.global.security.ssl }}
{{- if $global.Values.global.security.ssl.trustStore }}
  {{- if or ($global.Values.global.security.ssl.trustStore.trustJavaCACerts) (and ($global.Values.global.security.ssl.trustStore.trustedCertDir) (ne $global.Values.global.security.ssl.trustStore.trustedCertDir "")) (and ($global.Values.global.security.ssl.trustStore.storeLocation) (ne $global.Values.global.security.ssl.trustStore.storeLocation "")) }}
  {{- $varTrustStoreJvmArg = (printf "%s=%s %s=%s %s=%s" "-Djavax.net.ssl.trustStore" "$JAVA_TRUST_STORE_PATH" "-Djavax.net.ssl.trustStorePassword" "$JAVA_TRUST_STORE_PASS" "-Djavax.net.ssl.trustStoreType" "PKCS12") }}

  {{- if and $global.Values.global.security.ssl.trustStore.storeLocation (ne $global.Values.global.security.ssl.trustStore.storeLocation "") }} 
    {{- $varTrustStorePath = $global.Values.global.security.ssl.trustStore.storeLocation }}
  {{- else if and $global.Values.global.security.ssl.trustStore.trustedCertDir (ne $global.Values.global.security.ssl.trustStore.trustedCertDir "") }}
    {{- $varTrustStorePath = "/opt/ssfs/runtime/security/trustStore" }}
    {{- $varTrustStorePass = "changeit" }}
    {{- $varTrustedDir = $global.Values.global.security.ssl.trustStore.trustedCertDir }}
    {{- if $global.Values.global.security.ssl.trustStore.trustJavaCACerts }}
      {{- $varUseJDKTrustStore = "true" }}
    {{- end }}
  {{- else if $global.Values.global.security.ssl.trustStore.trustJavaCACerts }}
    {{- $varTrustStorePath = "/opt/ssfs/runtime/security/trustStore" }}
    {{- $varTrustStorePass = "changeit" }}
    {{- $varUseJDKTrustStore = "true" }}   
  {{- end }}

  {{- end }}
{{- end }}

{{- if $global.Values.global.security.ssl.keyStore }}
{{- if and $global.Values.global.security.ssl.keyStore.storeLocation (ne $global.Values.global.security.ssl.keyStore.storeLocation "")  }}
{{- $varKeyStoreJvmArg = (printf "%s=%s %s=%s %s=%s" "-Djavax.net.ssl.keyStore" "$JAVA_KEY_STORE_PATH" "-Djavax.net.ssl.keyStorePassword" "$JAVA_KEY_STORE_PASS" "-Djavax.net.ssl.keyStoreType" "PKCS12") }}
{{- $varKeyStorePath = $global.Values.global.security.ssl.keyStore.storeLocation }}  
{{- end }}
{{- end }}

{{- end }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "om-chart.fullname" $global }}-{{ $serverNameLow }}
  labels:
{{ include "sch.metadata.labels.standard" (list $global "" (dict $stdPodLabel $stdPodLabelVal)) | indent 4 }}
spec:
  replicas: {{ $varReplicaCount | default 1 }}
{{- if $global.Values.omserver.deploymentStrategy }}
  strategy: 
{{ toYaml $global.Values.omserver.deploymentStrategy | indent 4 }}
{{- end }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list $global "" (set $custLabels $stdPodLabel $stdPodLabelVal)) | indent 6 }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list $global "" (set $custLabels $stdPodLabel $stdPodLabelVal)) | indent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") $global | sha256sum }}
{{- include "sch.metadata.annotations.metering" (list $global $global.sch.chart.metering "" "" nil) | indent 8 }}
    spec:
{{- with $varTolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
{{- end }}
      affinity:
{{- include "om-chart.nodeAffinity" (list $global $varNodeAffinity) | indent 8 }}
{{- include "om-chart.podAffinity" (list $global $varPodAffinity) | indent 8 }}
{{- include "om-chart.podAntiAffinity" (list $global $varPodAntiAffinity $stdPodLabel $stdPodLabelVal) | indent 8 }}
      serviceAccountName: {{ $global.Values.global.serviceAccountName | default "default" }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: {{ $global.Values.global.persistence.securityContext.fsGroup | default 0 }}
        supplementalGroups: [{{ $global.Values.global.persistence.securityContext.supplementalGroup | default 0 }}]
      {{- if eq (include "om-chart.require-datasetup" $global) "true" }}
      initContainers:
      - name: {{ template "om-chart.fullname" $global }}-{{ $serverNameLow }}-init
        {{- if and $global.Values.omserver.image.name $global.Values.omserver.image.tag }}
        image: "{{ $global.Values.global.image.repository }}/{{ $global.Values.omserver.image.name }}:{{ $global.Values.omserver.image.tag }}"
        {{- else }}
        image: "{{ $global.Values.global.image.repository }}/{{ $global.Values.global.image.agentName }}:{{ $global.Values.global.image.tag }}"
        {{- end }}
        securityContext:
          privileged: false
          runAsUser: 1000
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        command: ['/bin/bash', '-c']
        args:
        - 'while [ -z $(find /mediator -maxdepth 1 -name datasetup.complete) ]; do echo "datasetup not complete $(date +%Y-%m-%d.%H.%M.%S)"; sleep 30; done; echo "datasetup found complete $(date +%Y-%m-%d.%H.%M.%S)"'
        volumeMounts:
        - name: {{ $global.Values.global.persistence.claims.name }}
          mountPath: "/shared"
        - name: mediator
          mountPath: "/mediator"
      {{- end }}
      terminationGracePeriodSeconds: {{ $terminationGracePeriod }}
      containers:
      - name: {{ template "om-chart.fullname" $global }}-{{ $serverNameLow }}
        {{- if and $global.Values.omserver.image.name $global.Values.omserver.image.tag }}
        image: "{{ $global.Values.global.image.repository }}/{{ $global.Values.omserver.image.name }}:{{ $global.Values.omserver.image.tag }}"
        {{- else }}
        image: "{{ $global.Values.global.image.repository }}/{{ $global.Values.global.image.agentName }}:{{ $global.Values.global.image.tag }}"
        {{- end }}
        imagePullPolicy: {{ $global.Values.omserver.image.pullPolicy }}
        lifecycle: 
          preStop:
            exec:
              command: ['/bin/bash','-c','/opt/ssfs/runtime/bin/agentserverstop.sh -name {{ $serverName }}']
        env:
        {{- if ne $varTrustStorePath "" }}
        - name: JAVA_TRUST_STORE_PATH
          value: {{ $varTrustStorePath | quote }}
        - name: JAVA_TRUST_STORE_PASS
          {{- if ne $varTrustStorePass "" }}
          value: {{ $varTrustStorePass | quote }}
          {{- else }}
          valueFrom:
            secretKeyRef:
              name: {{ $global.Values.global.appSecret }}
              key: trustStorePassword
          {{- end }}
        {{- end }} 
        {{- if ne $varUseJDKTrustStore "" }}
        - name: USE_JDK_TRUST_STORE
          value: {{ $varUseJDKTrustStore | quote }}            
        {{- end }}        
        {{- if ne $varTrustedDir "" }}
        - name: OMS_TRUSTED_CERTS_DIR
          value: {{ $varTrustedDir | quote }}            
        {{- end }} 

       {{- if ne $varKeyStorePath "" }}
        - name: JAVA_KEY_STORE_PATH
          value: {{ $varKeyStorePath | quote }}
        - name: JAVA_KEY_STORE_PASS
          valueFrom:
            secretKeyRef:
              name: {{ $global.Values.global.appSecret }}
              key: keyStorePassword            
       {{- end }}
        - name: OM_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OM_RELEASE
          value: {{ $global.Release.Name }}
        - name: dbpassword
          valueFrom:
            secretKeyRef:
              name: {{ $global.Values.global.appSecret }}
              key: dbpassword
        - name: LOG_FORMAT
          value: {{ $global.Values.global.log.format | default "json" }}
{{- with $global.Values.global.envs }}
{{ toYaml . | indent 8 }}
{{- end }}
        resources:
{{ toYaml $varResources | indent 10 }}
        securityContext:
          privileged: false
          runAsUser: 1000
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        command: ["/bin/bash", "-c"]
        {{- $commonArg := printf "%s %s %s %s" "/opt/ssfs/runtime/container-scripts/utils/evaluateEnvs.sh" $sysOverridesInitPath $sysOverridesPath "&&  /opt/ssfs/runtime/container-scripts/utils/configCerts.sh && "}}
        {{- if $varJvmArgs }}
        args:
        - '{{ $commonArg }} /opt/ssfs/runtime/bin/agentserver.sh -jvmargs {{ printf "%s %s %s %s" $varJvmArgs $varServerStateJvmArg $varTrustStoreJvmArg $varKeyStoreJvmArg | quote }} {{ $serverName }}'
	      {{- else }}
        args:
        - '{{ $commonArg }}
        /opt/ssfs/runtime/bin/agentserver.sh -jvmargs {{ printf "%s %s %s" $varServerStateJvmArg $varTrustStoreJvmArg $varKeyStoreJvmArg | quote }} {{ $serverName }}'
        {{- end }}
        workingDir: "/opt/ssfs/runtime/"
        volumeMounts:
        - name: {{ $global.Values.global.persistence.claims.name }}
          mountPath: "/shared"
        {{- if $global.Values.global.mq.bindingConfigName }}
        - name: binding-config
          mountPath: {{ $global.Values.global.mq.bindingMountPath | quote }}
          subPath: .bindings
        {{- end }}
        - name: config
          mountPath: "{{ $sysOverridesInitPath }}"
          subPath: system_overrides.properties
        {{- if $global.Values.global.customerOverrides }}
        - name: config
          mountPath: "/opt/ssfs/runtime/properties/customer_overrides.properties"
          subPath: customer_overrides.properties
        {{- end }}
        {{- /* mount custom config maps */ -}}
        {{- if $global.Values.global.customConfigMaps -}}
        {{ range $global.Values.global.customConfigMaps -}}
        {{ if . -}}
        {{ $configMap := . }}
        {{- if and $configMap.name $configMap.mountPath }}
        - name: {{ $configMap.name }}
          mountPath: {{ $configMap.mountPath }}
          {{- if $configMap.subPath }}
          subPath: {{ $configMap.subPath }}
          {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- /* mount custom secrets */ -}}
        {{- if $global.Values.global.customSecrets -}}
        {{ range $global.Values.global.customSecrets -}}
        {{ if . -}}
        {{ $secret := . }}
        {{- if and $secret.name $secret.mountPath }}
        - name: {{ $secret.name }}
          mountPath: {{ $secret.mountPath }}
          {{- if $secret.readOnly }}
          readOnly: {{ $secret.readOnly }}
          {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        # - name: host-timezone
        #   mountPath: /etc/localtime
        livenessProbe:
          exec:
            command:
            - '/bin/bash'
            - '-c'
            - '/opt/ssfs/runtime/container-scripts/utils/agentStartupTest.sh {{ $varServerStateDir }} {{ printf "%s--%s_*" $serverNameUnQuote $serverNameUnQuote | quote }} {{ div $readyFailRestartSeconds 60 }}'
          initialDelaySeconds: {{ $liveProbeBeginDelaySecs }}
          {{- /* check for liveness every n seconds */}}
          periodSeconds: {{ $readyProbePeriod }}
          {{- /* A successful probe must return in less than 1 seconds */}}
          timeoutSeconds: 1
          failureThreshold: {{ $liveFailThreshold }}
        readinessProbe:
          exec:
            command:
            - '/bin/bash'
            - '-c'
            - '/opt/ssfs/runtime/container-scripts/utils/agentStartupTest.sh {{ $varServerStateDir }} {{ printf "%s--%s_*" $serverNameUnQuote $serverNameUnQuote | quote }} {{ div $readyFailRestartSeconds 60 }}'
          initialDelaySeconds: 1
          {{- /* check for readiness every n seconds */}}
          periodSeconds: {{ $readyProbePeriod }}
          {{- /* A successful probe must return in less than 1 seconds */}}
          timeoutSeconds: 1
          failureThreshold: {{ $readyFailThreshold }}
      volumes:
      - name: {{ $global.Values.global.persistence.claims.name }}
        persistentVolumeClaim:
          claimName: {{ template "om-chart.fullname" $global }}-{{ $global.Values.global.persistence.claims.name | lower }}
      - name: config
        configMap:
          name: {{ template "om-chart.fullname" $global }}-config
          items:
        {{- if $global.Values.global.customerOverrides }}
          - key: customer_overrides.properties
            path: customer_overrides.properties
        {{- end }}
          - key: system_overrides.properties
            path: system_overrides.properties
      - name: secret
        secret:
          secretName: {{ $global.Values.global.appSecret }}
      {{- if $global.Values.global.mq.bindingConfigName }}
      - name: binding-config
        configMap:
          name: {{ $global.Values.global.mq.bindingConfigName }}
      {{- end }}
      - name: mediator
        configMap:
          name: {{ template "om-chart.fullname" $global }}-mediator
      {{- /* custom config maps */ -}}
      {{- if $global.Values.global.customConfigMaps -}}
      {{ range $global.Values.global.customConfigMaps -}}
      {{ if . -}}
      {{ $configMap := . }}
      {{- if and $configMap.name $configMap.mountPath }}
      - name: {{ $configMap.name }}
        configMap:
          name: {{ $configMap.name }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- /* custom secrets */ -}}
      {{- if $global.Values.global.customSecrets -}}
      {{ range $global.Values.global.customSecrets -}}
      {{ if . -}}
      {{ $secret := . }}
      {{- if and $secret.name $secret.mountPath }}
      - name: {{ $secret.name }}
        secret:
          secretName: {{ $secret.name }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      # - name: host-timezone
      #   hostPath:
      #     path: /etc/localtime
---
{{ end -}}
{{ end -}}
{{ end -}}
{{ end -}}
{{ end -}}
{{ end -}}
